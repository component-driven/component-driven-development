import CDTheme from '@component-driven/mdx-deck-theme';
import Stack from 'stack-styled';

export const theme = { ...CDTheme };

<Primary>

# Adverity Design System 101

</Primary>

---

## Outline

1. Introduction
1. Design Tokens
1. Basic Primitives
1. Layout Primitives
1. UI Patterns
1. Discussion and Q&A

---

## Andrey Okonetchnikov

Design System Lead, UI developer with experience in both design and development who specializes in interaction design, design systems and modern frontend development.

[@okonetchnikov](https://twitter.com/okonetchnikov)

---

<Primary>

# Design System

</Primary>

---

## Why do we need a design system?

1. UI consistency
1. Coherent user experience
1. A common design language
1. Speed of development

---

## 👩‍💻 Developers

1. Component library
1. Speed of development
1. Best practices
1. Shared language

---

## 👨‍🎨 Designers

1. Speed of design
1. Shared component library
1. Design principles and UI patterns
1. Shared language

---

## 👯‍♀️ Teams

1. Shared language
1. Product quality

---

<Secondary>

# A very brief history of UI Development

</Secondary>

---

## Building UI using HTML & CSS

Past ~20 years

1. Get a static mockup from a designer
1. Write HTML markup that represents the mockup
1. Write CSS and connect with HTML using classes
1. "Sprinkle" JavaScript using classes to add interactivity
1. Hand off to a backend developer
1. Replace HTML with PHP, Ruby, Java, ...
1. ...
1. Profit

---

## Building UI with React

Past ~5 years

1. Get a static mockup from a designer
1. Get data from API endpoint
1. Render data in JSX using HTML
1. Write CSS and connect with JSX using `className`
1. ...
1. Profit

---

<Secondary>

> Designers are still drawing **static mockups** and developers are writing **HTML & CSS**

</Secondary>

---

<Secondary>

# Whatʼs the problem with static mockups?

</Secondary>

---

<Image src={'/assets/dribbble1.png'} size="contain" />

---

<Image src={'/assets/dribbble2.png'} size="contain" />

---

## Static mockups...

1. not covering all possible states
1. not covering all possible resolutions
1. losing lots of design knowledge during ~~translation~~ hand-off
1. are static!

---

<Secondary>

# Whatʼs the problem with using CSS?

</Secondary>

---

> CSS is hard 🤯

---

<Secondary>

# Quiz

</Secondary>

---

<SplitTitle>

## What text color Text A and Text B going to be?

<Split>

```css
.red {
	color: red;
}

.blue {
	color: blue;
}
```

```html
<p class="red blue">Text A</p>
<p class="blue red">Text B</p>
```

</Split>

</SplitTitle>

---

<TweetEmbed id="1038073603311448064" />

---

> CSS is the source of UI inconsistencies

---

<Figure
	src={'/assets/doors.jpg'}
	alt="Different doors"
	caption="Same but differnt"
/>

---

## Sources of UI inconsistencies

1. Color & Typography
1. Spacing & Layout

---

<SplitTitle>

## Custom CSS

<Split>

```css
.description {
	margin-bottom: 20px;
	font-size: 16px;
	color: #c9b8b9;
}
```

```css
.count {
	margin-left: 0.75em;
	font-size: 14px;
	opacity: 0.5;
	color: #fc9;
}
```

</Split>
</SplitTitle>

---

<Figure
	src="/assets/too-many-buttons.jpg"
	alt="Different button styles"
	caption="Different button styles"
/>

---

<Figure
	src="/assets/too-many-buttons-2.jpg"
	alt="Different button styles"
	caption="Different button styles"
/>

---

<Figure
	src="/assets/text.png"
	alt="Different text styles"
	caption="Different text styles"
/>

---

> CSS is too expressive

---

<Secondary>

## What should we do?

</Secondary>

---

> Stop writing CSS!

---

<Primary>

# Design tokens

</Primary>

---

<Figure
	src="/assets/dls-foundation.png"
	alt="Design Tokens"
	caption="Design Tokens"
/>

---

> Design tokens are everything you use more than once in your styles

---

<Demo src="https://design-system.adverity.net/versions/17.2.0/storybook/?path=/docs/documentation-design-tokens-tokens-list--page" />

---

## 👩‍💻 Developers

1. Designs should be interpreted with tokens
1. If there are inconsistencies, use tokens!
1. If there is no token, raise questions!
1. Talk before you work

---

## 👨‍🎨 Designers

1. Use design tokens while designing
1. No custom values please
1. Over-specify and over-communicate
1. If something is missing in DS, talk to us!

---

## 👯‍♀️ Pod Owners

1. Verify that everything is specified earlier on
1. Help communicate within teams
1. If something is missing in DS, talk to us!

---

<Primary>

# Components

</Primary>

---

> HTML was designed for documents, not applications!

---

<Stack gridGap={5} p={4} gridTemplateColumns="auto 1fr auto">
	<Appear>
		<span>Text, Heading</span>
		<div>
			<Code language="html">{`<h1>Heading</h1>
<p>Text</p>`}</Code>
		</div>
		<span>️😊</span>
		<span>Link</span>
		<div>
			<Code language="html">{`<a href="#">Link</a>`}</Code>
		</div>
		<span>🤔</span>
		<span>Button</span>
		<div>
			<Code language="html">
				{`<button>Button</button>
<input type="button">Button</input>`}
			</Code>
		</div>
		<span>🙄</span>
		<span>Dropdown</span>
		<div sx={{ maxHeight: '50%' }}>
			<Code language="html">
				{`<div class="dropdown">
    <button
	  class="btn btn-default dropdown-toggle"
	  type="button"
	  id="dropdownMenu1"
	  data-toggle="dropdown"
	>
      Dropdown <span class="caret"></span>
    </button>
    <ul class="dropdown-menu">
      <li><a href="#">Action</a></li>
      <li><a href="#">Another action</a></li>
      <li><a href="#">Something else here</a></li>
      <li role="separator" class="divider"></li>
      <li><a href="#">Separated link</a></li>
    </ul>
  </div>`}
			</Code>
		</div>
		<span>😩</span>
	</Appear>
</Stack>

---

<Figure
	src={'/assets/bootstrap-dropdown.png'}
	alt="Bootstrap Documentation Screenshot"
	caption={
		<a href="https://getbootstrap.com/docs/3.3/components/#dropdowns">
			https://getbootstrap.com/docs/3.3/components/#dropdowns
		</a>
	}
/>

<ThatGuy />

---

# Components

- `<Button>` → `<button>`
- `<Input>` → `<input type="text">`
- `<Checkbox>` → `<input type="checkbox">`
- `<Dropdown>` → ~~`<select>`~~ `<div class="dropdown">...`

---

> Components is a better way of writing HTML

---

```html
<div class="dropdown">
  <button
    class="btn btn-default dropdown-toggle"
    type="button"
    id="dropdownMenu1"
    data-toggle="dropdown"
    aria-haspopup="true"
    aria-expanded=“true"
  >
    Dropdown
    <span class="caret"></span>
  </button>
  <ul
     class="dropdown-menu"
     aria-labelledby=“dropdownMenu1"
  >
    <li><a href="#">Action</a></li>
    <li><a href="#">Another action</a></li>
    <li role="separator" class="divider"></li>
    <li><a href="#">Separated link</a></li>
  </ul>
</div>
```

---

```jsx
<DropdownMenu trigger={<Button>Open Dropdown</Button>}>
	<DropdownMenuItem>Action</DropdownMenuItem>
	<DropdownMenuItem>Another action</DropdownMenuItem>
	<DropdownMenuSeparator />
	<DropdownMenuItem href="#">Separated link</DropdownMenuItem>
</DropdownMenu>
```

---

> Components can change over time

---

```jsx
const Dropdown = props => (
	<select>
		{props.options.map(option => (
			<option>{option}</option>
		))}
	</select>
);
```

---

```jsx
const Dropdown = props => (
	<div className="dropdown">
		<button class="btn btn-dropdown">{props.button}</button>
		<ul>
			{props.options.map(option => (
				<li>{option}</li>
			))}
		</ul>
	</div>
);
```

---

> Components is a common UI language

<Notes>
	You can watch my talk from React Amsterdam or React Finland called "A Common
	Design Language".
</Notes>

---

<Grid gap={5} columns={2}>
	<span>A button</span>
	<Code language="jsx">{`<Button>`}</Code>
	<span>A primary button</span>
	<Code language="jsx">{`<Button primary>`}</Code>
	<span>A cheked checkbox</span>
	<Code language="jsx">{`<Checkbox checked>`}</Code>
	<span>A dropdown menu</span>
	<Code language="jsx">{`<DropdownMenu>`}</Code>
</Grid>

---

<Primary imgSrc="/assets/legos.jpg">

# Primitive components

</Primary>

---

> Primitives are the building blocks of the user interface.

---

<Figure
	src={'/assets/legos-assembled.jpg'}
	alt="Lego cars"
	caption="Different items from the same set of bricks"
/>

---

<Primary>

# Basic Primitives

</Primary>

---

## The React way™

---

<Code language="jsx" inline>{`<button onclick={handleClick} />`}</Code>

vs.

<Code language="jsx" inline>{`<Button onClick={handleClick} />`}</Code>

---

<Code
	language="jsx"
	inline
>{`<font face="Arial" size="3" color="red" />`}</Code>

vs.

<Code
	language="jsx"
	inline
>{`<Text fontFace="base" fontSize={3} color="danger" />`}</Code>

---

> Learn once, use everywhere

---

## CSS + React way™ = styled-system

---

<Figure
	src={'/assets/styled-system.png'}
	alt="Styled-system Webiste"
	caption={<a href="https://styled-system.com">https://styled-system.com</a>}
/>

---

> Styled System lets you quickly build custom UI components with constraint-based style props based on scales defined in your theme.

---

<Secondary>

# Text

</Secondary>

---

## API design

Things developers will be allowed to customize

- Typography (`fontSize`, `fontWeight`, `letterSpacing`, etc.)
- Alignment (`left`, `center`, `right`, ~~`justify`~~)
- Color (`color`)
- Whitespace (`margin`)
- HTML elements (`p`, `span`, `label`)

---

> A minimal set of props that can be customized

---

```javascript
import styled from 'styled-components';
import { color, margin, typography } from 'styled-system';

export const Text = styled.p(
	// defaults
	{
		margin: 0,
		lineHeight: 1.5,
	},
	// API
	color,
	typography,
	margin
);
```

---

```javascript
import Text from '../primitives/Text';

<Text color="gray.9" fontWeight="bold">
	Bold red text
</Text>;
```

---

<Image src={'/assets/text.png'} size="contain" />

---

## Only necessary text styles

<ul>
	<li>
		<h1 style={{ textAlign: 'left', margin: 0 }}>Heading 1</h1>
	</li>
	<li>
		<h2 style={{ textAlign: 'left', margin: 0 }}>Heading 2</h2>
	</li>
	<li>Normal text</li>
	<li style={{ color: '#979797', fontSize: '80%' }}>Secondary text</li>
	<li style={{ color: '#930' }}>Error</li>
	<li>etc.</li>
</ul>

---

```javascript
import Text from '../primitives/Text';

<Text textStyle="secondary">Not so important text</Text>;
```

---

> UI inventory helps with defining whatʼs necessary

---

<Demo src="https://design-system.adverity.net/versions/17.3.0/storybook/?path=/docs/documentation-foundation-typography--heading" />

---

## API: rigidity vs flexibility

- `<Text textStyle="error">` 👍
- `<Text color="warning.6" size="x-small">` 💪
- `<Text textStyle="error" color="green.9">` 👎
- `<Text textStyle="error" css={{ fontWeight: 'bold' }} >` 🧐

---

## API: HTML element

- `<Text>` → `<p>` 😀
- `<Text inline>` → `<span>` 😐
- `<Text label>` → `<label>` 😭
- `<Text as="label">` → `<label>` 😀

---

> Primitives are very flexible to not block you

---

<Primary>

# Layout Primitives

</Primary>

---

<Figure
	src={'/assets/spacing-scale.png'}
	alt="Spacing composition"
	caption="Space composition by Nathan Curtis"
/>

---

> Primitives to control layout and white space around their children

---

<Secondary>

# Box

</Secondary>

---

## API design

- Layout (`width`, `height`, etc.)
- White space (`margin`, `padding`)
- Colors (`background`, `color`)
- Borders (`border`, `border-radius`),
- Shadows (`box-shadow`),
- HTML elements (`div`, `span`, `section`, ...)

---

```javascript
import styled from 'styled-components';
import { layout, space, color, border, boxShadow } from 'styled-system';

export const Box = styled.div(
	// defaults
	{
		minWidth: 0,
	},
	// API
	layout,
	space,
	color,
	border,
	boxShadow
);
```

---

<Demo src="https://design-system.adverity.net/versions/17.3.0/playroom/#?code=N4Igxg9gJgpiBcIA8AhCAPABAQwM4F4AdEAMwgCcBbYgPkIDtNNUMGmm8iQBLegBwCuAF2Jt2AN2wAbATC4AVABbdcmFTka9BIkGKZ9sUKLwDmXdOgC0uStKmjG7W%2BRO8AStxOKh5qzbsO7JgARhSw5ADq3FBCilwAjIHsoeThAMIQUhRcJuTYAJ4AdADMSUwp4W6G3AIExIm6juVhMOQAykL5UnLEuJnRSQD0dI4s6Ho4dSDBwkIQ9GWYBkamvta2UvaNQRWtUTFx9Yu75BlZ5FzBefRQhQAcxy3kVca1CY%2BprR1dPSB9UgNtslsGAANa5CACG5nbLEK7YG6FACsi0g5y4AHdlEIYEkRkEULN5pgpNhgjB7KNBmh0CMkNSMCMQAAaECxGCUGC4BAAbR49Fwnm83IAuqyMdFYtz4DyRQBfIA" />

---

<AnimatedGradient>

> Model API based on CSS knowledge

</AnimatedGradient>

---

<Secondary>

# Flex

</Secondary>

---

## Flexbox layout

```jsx
<Flex
	alignItems="center"
	justifyContent="center"
	flexDirection="row"
	flexWrap="wrap"
/>
```

---

<Demo src="https://design-system.adverity.net/versions/17.3.0/playroom/#?code=N4Igxg9gJgpiBcIA8AxANjAHgAgIYGcBeAHRADMIAnAW1ID5iA7bbJAIQkyZZYJJACWjAA4BXAC6luPAG640omPwAqACwH5sGvMyFjJIaSzIZMAcUoQA7oWABGAL5Hsw3FChCA5v0yYAtPjU8mhSzDxBlJ5CAEoCnqriPv6BwaE82ABGVLCUAOoCUOKq-HZpPFmUOQDCEGhU-J6UuACeAHQAzGUsFTnRbgKiRKSlhmHd2TCUAMrizRj8%2BLUFZQD0DGHsnM58pBkS4hCMXS5uHozepL4BQWgho%2Bk9k-mFxcPHj5Q1dZT8GU2MUFaAA53hNKH0PIMSqDKpMZnMlKRFmhlvdyrgwABrRoQUQAr71Xb-QEAVmOkG%2B-Cs6nEMDK63SbH2h2waFwGRgIQ2Kw4mHWSBW6Cw6xAABoQEUYNQYPgEABtQSMfBxBKygC64qsBSKsvgcrVDiAA" />

---

<Secondary>

# Grid

</Secondary>

---

<Demo src="https://design-system.adverity.net/versions/17.3.0/playroom/#?code=N4Igxg9gJgpiBcIA8BxATgSygAgIYGcBeAHRADMI0BbU7SAGwFcqA7fAYQkZYBdDgAzAF9sAc0xQUuAA4kQ%2BKrnr1SAPmIts2JACEIADw1atBORhbTGPUkeMA3JYxhyAKgAsM%2BbJ7ybzl6xBbLTJ6GH10CAB3fgBGIWDsaVwoKHNROX19AFoFJRUgzWMAI0pYNAB1LB43OVibIq1StHLOeko5cVwATwA6AQbjbGbygCUUjEYiUnrCoZGYNABlHm6wuXwIeixB7AB6dSLdA0TTUn8rXa0HJmdSdx8fXD8LS7njUPDImOB4xOTUulMjk8sorsMyosqlAanVwQs0G0OqQun0Bu8mpC0OM0lM4RiIS1Fis1nd5Fsdu8DrZjoZGnhpiBilYeBAWOCAWkWBlSFlcoowQSEdDYTN4VikWg5MU0M8oL0ABzionYiZ4sVCrEk9akTbbKDw3BgADW4i4LCgkulsotvQArOCGMiQFEPDwYLtDkMdCy2dh6LhijAVEc9np9IckHt0FhDiAADQgGowKgwfAIADaIHM%2BAwojcPHTAF1E1Fqm50-AM0WhEA" />

---

<Secondary>

# Stack

</Secondary>

---

<Demo src="https://design-system.adverity.net/versions/17.3.0/playroom/#?code=N4Igxg9gJgpiBcIA8BlALgQzAawAQYGcBeAHRADMIAnAWzNwIAcsBLAOwHNSQCaMAbfvWosYbTGhYQ23ABYiAXtMxCQAPhJtcuJACEIAD03bthbu0YBXNGWMmAbgMsxuAFVksCuT-i0Xrtlom5PwwBgDiVBAA7kTAAIwAvnbazFBQ7FxkBgYAtLwCqim4AEbUsFQA6ixQaLLc8YEmpeUwVADCEPzU3BxUGACeAHQAzE0mZVQVAEoYGZbEZI0gxZMV6AOh3ARdNeMA9BpBeobFZmT%2BNitB2o78zm4eXj4YfmxWV8UhYZExcUnFNIZTjcHL5PiCcbaNZtaq1epLKEtKZtTrdKi9frDMbXZowqizeaLEDLVatKgbLZkHb8Pa43CHOwnIw3fDEkrWNDSJFAzKgvIFSH06HkuF1BpI-FonpkEr9NhQIYADkl5MJLAWEuFyPWaE2Lmpuygkqw2D6EEsCulGNl8sVAFYkZB0dxoh40DBxkdmrpOdJcPwMCUYEJjvt9AYjkh9uhTUcQAAaEB1GA0GAEBAAbRA7AILA4sjQGYAuknojU6hn4Jni4kgA" />

---

> Components should not have any whitespace around them!

---

<Secondary>

# Responsive design

</Secondary>

---

<SplitTitle>

### Each styled prop is responsive!

```jsx
// breakpoints: [small, medium, large]
<Stack gap={[1, 2, 3]} orientation={['vertical', 'horizontal']}>
	<Box>...</Box>
	<Box>...</Box>
	<Box>...</Box>
</Stack>
```

</SplitTitle>

---

<Demo src="https://design-system.adverity.net/versions/17.3.0/playroom/#?code=N4Igxg9gJgpiBcIA8BlALgQzAawDoDsACQjAZwF5cQAzCAJwFsqDjSAHLAS3wHNzgA2lVIMMAGzFUANISpiMdHjCoBdAL4tC9TjHyY0nCPn5CQANxh0DYcdNkgAFtoBeRzJJDqCAPk1IAQhAAHprEZJQg3GwArmjMRMSEZuLRMBEAKg6cpITZJERRsfGJhNRiMEEA4nQQAO78AIwaCcQcUFDcfFRBQQC0IuIeoYQARvSwdADqnFBoDhENxYljdBMAwhBi9BE8dBgAngB0AMxLxCsTAEoYHdEUVIsgwxeW6PvlEaSbM0sA9L4JALBYbhKiFOJPFpJFJpKiZPJ5DAFfAxCHDMoVap1RrNEptDq8CI9fqiCRnUbjSzTWbzB7kl50DZbOg7PZHU6QkoM663e4gR7PSl0N4fYTfKB-AHEIEhKGgkAjWJoIzk-GdIl9AZkznLIXUuYLelCpnbKgjPb4KCHAAcRtWlh5nDuhp15yFIthIC%2BYh%2BrtGWGwuwg0UtJpZZotVoArOTIMyIrUsmhlDqpYl-EqjIR5CMYJJAb9AkEAUhfugAwCQFIQHMYAwYKQEAJIvhSJweA40I2VNXajM5o34AJ1EA" />

---

<Primary>

# Primitives Composition

</Primary>

---

## API: Composition

- `<Heading>` → `<Text textStyle="heading" as="h1">`
- `<Label>` → `<Text textStyle="label" as="label">`
- `<Error>` → `<Text color="error" as="p">`

---

> Primitives are meant to be composed

---

<Primary>

# UI Patterns

</Primary>

---

> A design pattern is the re-usable form of a solution to a design problem.

---

## API: Patterns

- `<Card>` → `<Stack>...</Stack>`
- `<ProductCard>` → `<Card>...</Card>`
- `<ProductPage>` → `products.map(product => <ProductCard product={product} />)`

---

<Demo src="https://design-system.adverity.net/versions/17.3.0/storybook/?path=/docs/documentation-components-pattern-heading-heading-docs--page" />

---

<Demo src="https://design-system.adverity.net/versions/17.3.0/storybook/?path=/docs/documentation-components-pattern-modaldialog-modaldialog-docs--page" />

---

<Demo src="https://design-system.adverity.net/versions/17.3.0/storybook/iframe.html?id=documentation-components-pattern-autherrorpage-examples--insights" />

---

> UI patterns should be created in application and shared only if there is a need.

---

<Demo src="https://design-system.adverity.net/versions/17.3.0/playroom/#?code=N4Igxg9gJgpiBcIA8AhCAPAfAHQHYAJ9gAKASnwF5Mi9DCAnGAFwFd6DUNMkB6NLANy18AXxF5e-HLhAAaEEwAWMALYwAzggDaIAJa51ugOaKmmgLryA7rqhLN8LeZFA" />

---

<Primary>

# Recap

</Primary>

---

## 👨‍🎨 Designers

1. Use design tokens and components during design
1. Avoid custom UI at all cost. If not possible, use primitive components
1. Share design specs with design tokens and components

---

## 👩‍💻 Developers

1. Components is a better way of writing HTML & CSS
1. Use design tokens to reduce choice and improve consistensy (no custom values!)
1. When possible, use Patterns
1. If does not exist, use Primitives (but raise a question and pull in DS team)
1. Use layout primitives to control the white space
1. Never use HTML directly but create semantic HTML using `as` prop
1. Avoid using `css` prop

---

## 👯‍♀️ Teams

1. Talk to each other (and use the shared language)
1. There is no single right solution
1. Think of value to effort
1. Embrace design system, don't fight it

---

<Secondary>

# The future of UI development

</Secondary>

---

## Building UIs with primitives & patterns

1. Get a ~~static mockup~~ wireframe from a designer
1. Get data from API endpoint
1. Assembly UI using primitives or re-use a pattern.
1. ...
1. Profit

---

<Image src={'/assets/napkin.jpg'} size="contain" />

---

<Video
	src="https://airbnb.design/wp-content/uploads/2017/10/WireframeClassifiersmall.mp4?_=1"
	autoPlay="autoplay"
	loop="loop"
	width="100%"
	height="100vh"
	margin="auto"
/>

---

## Links and credits

- https://https://design-system.adverity.net
- https://https://design-system.adverity.net/playroom
- https://www.monolisa.dev — the coding font I'm using

---

<Figure
	src={'/assets/component-driven.svg'}
	alt="Component-driven Logo"
	caption={
		<a href="https://www.component-driven.dev">www.component-driven.dev</a>
	}
/>

---

<Secondary>

## [Survey](https://forms.gle/t5SQgJGjpcADotHu8)

</Secondary>

---

<Primary>

# Q & A

</Primary>

---

<Primary>

# Thank you!

<Grid gridGap={[3, 5]} columns={[1, 2]} pt={4}>
	<a href="https://twitter.com/okonetchnikov">@okonetchnikov</a>
	<a href="https://twitter.com/ComponentDriven">@ComponentDriven</a>
</Grid>

</Primary>
